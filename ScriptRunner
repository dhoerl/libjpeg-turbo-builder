#! /usr/bin/env -i /bin/ksh
# KSH is the one shell language I know really well.

# Copyright (c) 2015-2020 David Hoerl, all rights reserved
#
# I needed to clean the environment - some Xcode defines were messing up the build (this as of Xcode 6)
# above from http://crashingdaily.wordpress.com/2008/03/07/clearing-environment-variables-in-bash-scripts/ (Search on Gordon)
# and http://unix.stackexchange.com/questions/48994/how-to-run-a-program-in-a-clean-environment-in-bash

PWD=$(pwd)
export PATH="${PWD}:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin"
#echo $PATH

#if you want to see every command execute, remove the # below as "set -x" causes a lot of helpful output
#set -x

date

# Read in the user selected variables
. ./ScriptVariables
# set

# Now lets get the source

FETCH=""
VERSION=""

if [ -f ./libjpeg-turbo/VERSION ]
then
	VERSION=$(cat ./libjpeg-turbo/VERSION)
fi

if [ -d ./libjpeg-turbo ]
then
	if [[ ${TURBO_VERSION} == "master" ]]
	then
		if [[ ${VERSION} == "master" ]]
		then
			cd ./libjpeg-turbo
			git pull origin master # update
			cd ..
		else
			FETCH=" "
		fi
	else
		# user selected a numbered release
		if [[ ${TURBO_VERSION} != ${VERSION} ]]
		then
			FETCH="-b${TURBO_VERSION}"
			echo "Cloning version ${TURBO_VERSION}"
		else
			echo "Using version $(cat ./libjpeg-turbo/VERSION)"
		fi
	fi
else
	if [[ ${TURBO_VERSION} == "master" ]]
	then
		FETCH=" "
	else
		FETCH="-b${TURBO_VERSION}"
	fi
fi

if [[ ${FETCH} != "" ]]
then
	rm -rf ./libjpeg-turbo
	git clone ${FETCH} https://github.com/libjpeg-turbo/libjpeg-turbo.git
    echo ${TURBO_VERSION} > ./libjpeg-turbo/VERSION
    
    # just do this once
    cd libjpeg-turbo
	date >> ../Log.configure
    cd ..
fi

# Go into the source dir
cd libjpeg-turbo

../buildIOS
if [[ -f build/libturbojpeg.a ]]
then
	cp -f build/libturbojpeg.a /tmp/ios.a
else
	echo "BUILD FAILED"
	exit 1
fi

rm -rf build

if [[ -f /usr/local/bin/yasm ]]
then
	# builds the C only version
	echo "Building SIMD version of the Simulator slice"
	../buildSIM_SIMD

else
	# builds the C only version
	echo "Building C version of the Simulator slice"
	../buildSIM_C
fi

if [[ -f build/libturbojpeg.a ]]
then
	cp -f build/libturbojpeg.a /tmp/sim.a
else
	echo "BUILD FAILED"
	exit 1
fi

rm -rf build

# ... now pop out
cd ..

rm -f libturbojpeg.a
lipo -create /tmp/ios.a /tmp/sim.a -output libturbojpeg.a

if [ $? != "0" ]
then
    echo "Lipo failed!"
    exit 1
fi

rm /tmp/ios.a /tmp/sim.a

echo "SUCCESS!!!"

exit 0
